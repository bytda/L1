package main

import (
	"fmt"
	"sync"
)

/*
Задание:
Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде.
По завершению программа должна выводить итоговое значение счетчика.
*/

type Counter struct { //объявляем структуру счетчик
	i   int
	mux sync.Mutex
}

func (m *Counter) Add() { //объялвяем метод для структуры
	m.mux.Lock()   //блокируем Mutex
	m.i++          //инкрементируем счетчик
	m.mux.Unlock() //разблокируем Mutex
}

func main() {
	counter := new(Counter)  // создаем экземпляр структуры и сохраняем в переменную указатель(особенность New)
	var wg sync.WaitGroup    //объявляем экземпляр WaitGroup
	for i := 0; i < 5; i++ { //запускаем 5 инкриментеров
		wg.Add(1)        //добавляем горутину в группу
		go func(n int) { //запускаем горутину
			for i := 0; i < n; i++ { // каждый инкрементор увеличивает значение структуры на i + 1
				// (первый инкрементор на 1, пятый на 5)
				counter.Add()
			}
			wg.Done() //сигнал о завершении работы горутины

		}(i + 1) //параметры анонимной функции

	}
	wg.Wait() //дожидаемся завершения всех горутин в группе
	fmt.Println("Результат: ", counter.i)
}

package main

import "sync"

/*
Задание:
Дана последовательность чисел: 2,4,6,8,10.
Найти сумму их квадратов(2^2+3^2+4^2….) с использованием конкурентных вычислений.
*/

func main() {
	Channels()
	SyncWG()

}

func Channels() {
	println("С использованием каналов")
	var sum int //объявляем переменную для хранения суммы квадратов

	var arr = [...]int{2, 4, 6, 8, 10} //объявляем массив чисел

	intCh := make(chan int, len(arr)) // объявляем буферизированный канал для синхронизации горутин
	defer close(intCh)                //закрываем канал после выполнения функции Channels()

	for _, value := range arr { //перебираем числа в массиве
		go func(val int) { //для каждого запускаем анонимную функцию
			sqr := val * val //возведения в квадрат
			intCh <- sqr     // и отправляем полученный квадрат в канал
		}(value)
	}
	for i := 0; i < len(arr); i++ { //получаем каждую отправку горутин через канал
		sum += <-intCh //и суммируем полученные квадраты
	}
	println("Cумма квадратов:", sum) //выводим результат
}

func SyncWG() {
	println("C использование пакета sync")
	var sum int                        //объявляем переменную суммы квадратов
	var arr = [...]int{2, 4, 6, 8, 10} // объявляем массив чисел
	var mtx sync.Mutex                 //объявляем экземпляр Mutex для блокировки части кода
	var wg sync.WaitGroup              //объявляем экземпляр WaitGroup для отслеживания выполнения всех горутин
	wg.Add(len(arr))                   //добавляем количество горутин в группе которые нам нужно отслеживать
	for _, value := range arr {
		go func(val int) {

			mtx.Lock()       //блокируем общую переменую sum от других горутин
			sum += val * val //считаем сумму квадратов
			mtx.Unlock()     //разблокируем изменение переменной sum
			defer wg.Done()  //передаем в WaitGroup сигнал, что горутина отработала
		}(value)
	}
	wg.Wait()                        //ждем выполнения всех горутин
	println("Сумма квадратов:", sum) //выводим результат
}

package main

import (
	"fmt"
	"sync"
)

/*
Задание:
Разработать конвейер чисел. Даны два канала: в первый пишутся числа (x) из массива,
во второй — результат операции x*2, после чего данные из второго канала должны выводиться в stdout.
*/

func main() {
	var wg sync.WaitGroup                                         //объвляем WaitGroup
	firstChannel, secondChannel := make(chan int), make(chan int) //создаем два канала

	data := [...]int{2, 3, 6, 1, 8, 22, 1} //создаем массив данных для конвеера
	fmt.Println("Числа конвеера: ", data)  //выводим их в консоль
	go func() {                            //запускаем горутину писателя
		for _, da := range data { //перебираем массив
			firstChannel <- da //каждое число отправляем в канал
		}
		close(firstChannel) //сюда попадаем когда в следующем канале примут все значения,
		// так как цикл блокируется пока получатель не прочитает значения в канале
		//после отправки всех значений попадаем сюда и закрываем первый канал
	}()
	go func() { //запускаем горутину возводителя в квадрат
		for {
			if v, ok := <-firstChannel; ok { //проверяем открыт ли первый канал и получаем из него значения
				secondChannel <- v * v //значения из первого канала возводим в квадрат и отправляем во второй канал
				continue               //отправляем в начало цикла пока первый канал открыт
			}
			close(secondChannel) //закрываем второй канал, так как все отправили
			break                //прерываем бесконечный цикл
		}
	}()
	wg.Add(1)   //добавили в группу ожидания одну горутину
	go func() { //горутина читатель
		for {
			if v, ok := <-secondChannel; ok { //читаем второй канал пока он открыт
				fmt.Println("Квадрат с конвеера: ", v) //выводим в консоль
				continue                               //переходим в начало цикла
			}
			wg.Done() //как вышли из if отправляем сигнал о завершении
			break     //прерываем цикл
		}

	}()
	wg.Wait() //ждем сигнала о завершении
}

package main

import (
	"fmt"
	"math/rand"
)

/*
Задание:
Дана переменная int64. Разработать программу, которая устанавливает i-й бит в 1 или 0
*/
func main() {
	var value int64                   //` переменная int64`
	value = rand.Int63()              //случайно задаем ей значение
	fmt.Println("Переменная:", value) //выводим в консоль полученное значение
	for {
		var i, v int                                               //задаем переменные для номера бита и его значения
		var result int64                                           //и для результата
		fmt.Println("Введите номер изменяемого бита от 0 до 63: ") //обращаемся к пользователю
		if _, err := fmt.Scan(&i); err != nil {                    //сканируем ввод в консоли и кладем значение в переменную i
			fmt.Println(err) //в случае ошибки выводим ее
			return
		}
		if i < 0 || i > 63 { //проверяем на корректность введенное значение
			fmt.Println("Неверное значение") //пишем пользователю
			continue                         //прерывает цикл и отправляет его в начало, то есть запускает заново
		}
		fmt.Println("Выберите значение бита (1 или 0): ")
		if _, err := fmt.Scan(&v); err != nil { //сканируем значение бита и кладем в переменную
			fmt.Println(err) //в случае ошибки - выводим ее
			return
		}
		if v != 0 && v != 1 { //проверяем корректность данных
			fmt.Println("Неверное значение")
			continue //прерывает цикл и отправляет его в начало, то есть запускает заново
		}
		result = BitChanger(i, v, value)          //вызываем функцию
		fmt.Println("Полученное число: ", result) //выводим результат
		break                                     //завершаем цикл
	}
}
func BitChanger(i, v int, value int64) int64 {
	var mask int64 = 1 << i //сдвигаем разряды на позицию нужного нам бита (i) для маски

	if v == 0 { //если бит нужно поменять на 0 то применяем сброс бита (И НЕ)
		value = value &^ mask //бит 1 начального числа меняется только если на этой позиции в маске стоит 1,
		// в остальных случаях биты остаются такими же пример: 101 &^ 110 = 001
		return value
	}
	value = value | mask //если нужно получить бит = 1, то используем поразрядное сложение (ИЛИ)
	// пример  101 | 010 = 111  , так как у нас в маске все биты 0 кроме того который нам надо заменить
	//то результирующее число изменит бит только там где в маске стоит 1

	return value

}
